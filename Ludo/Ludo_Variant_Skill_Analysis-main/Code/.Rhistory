games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
change = numeric(length = nrow(d))
change_prev = numeric(length = nrow(d))
for(i in 1:nrow(d))
{
index1 = which(users == d$`Strategy 1`[i])
index2 = which(users == d$`Strategy 2`[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
score_diff = abs(d$`P1 Score`[i]-d$`P2 Score`[i])
score_multiplier = score_diff/30
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = as.numeric(d$Winner_ID[i] == 0)
A2 = as.numeric(d$Winner_ID[i] != 0)
D = ratings[index1] - ratings[index2]
E1 = 1/(1 + 10^(-D/400))
E2 = 1 - E1
change[i] = abs(round((K1+K2)/2 * score_multiplier * (A1 - E1)))
change_prev[i]=abs(round((K1+K2)/2 * (A1 - E1)))
ratings[index1] = ratings[index1] + round(K1 * score_multiplier * (A1 - E1))
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] + round(K2 * score_multiplier * (A2 - E2))
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
set.seed(1234)
d = d[sample(1:nrow(d)),]
users = unique(c(d$`Strategy 1`,d$`Strategy 2`))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = 0, nrow = 6000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
change = numeric(length = nrow(d))
change_prev = numeric(length = nrow(d))
for(i in 1:nrow(d))
{
index1 = which(users == d$`Strategy 1`[i])
index2 = which(users == d$`Strategy 2`[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
score_diff = abs(d$`P1 Score`[i]-d$`P2 Score`[i])
score_multiplier = score_diff/30
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = as.numeric(d$Winner_ID[i] == 0)
A2 = as.numeric(d$Winner_ID[i] != 0)
D = ratings[index1] - ratings[index2]
E1 = 1/(1 + 10^(-D/400))
E2 = 1 - E1
change[i] = abs(round((K1+K2)/2 * score_multiplier * (A1 - E1)))
change_prev[i]=abs(round((K1+K2)/2 * (A1 - E1)))
ratings[index1] = ratings[index1] + round(K1 * score_multiplier * (A1 - E1))
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] + round(K2 * score_multiplier * (A2 - E2))
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating,"Avg Change in Ratings" = change,"Avg Change in Ratings without score modifications" = change_prev)
colnames(dynamic_ratings) = users
cbind(users,ratings)
# Load libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average = mean(Value))
main_colors <- c(
"MCTS-0" = "#1f78b4",   # blue
"MCTS-25" = "#33a02c",  # green
"MCTS-50" = "#6a3d9a",  # purple
"Mindist+Opp" = "#1dd3b0"  # teal/aqua (new)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = FALSE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
set.seed(1234)
d = d[sample(1:nrow(d)),]
users = unique(c(d$`Strategy 1`,d$`Strategy 2`))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 6000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
change = numeric(length = nrow(d))
change_prev = numeric(length = nrow(d))
for(i in 1:nrow(d))
{
index1 = which(users == d$`Strategy 1`[i])
index2 = which(users == d$`Strategy 2`[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
score_diff = abs(d$`P1 Score`[i]-d$`P2 Score`[i])
score_multiplier = score_diff/30
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = as.numeric(d$Winner_ID[i] == 0)
A2 = as.numeric(d$Winner_ID[i] != 0)
D = ratings[index1] - ratings[index2]
E1 = 1/(1 + 10^(-D/400))
E2 = 1 - E1
change[i] = abs(round((K1+K2)/2 * score_multiplier * (A1 - E1)))
change_prev[i]=abs(round((K1+K2)/2 * (A1 - E1)))
ratings[index1] = ratings[index1] + round(K1 * score_multiplier * (A1 - E1))
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] + round(K2 * score_multiplier * (A2 - E2))
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating,"Avg Change in Ratings" = change,"Avg Change in Ratings without score modifications" = change_prev)
colnames(dynamic_ratings) = users
cbind(users,ratings)
# Load libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average = mean(Value))
main_colors <- c(
"MCTS-0" = "#1f78b4",   # blue
"MCTS-25" = "#33a02c",  # green
"MCTS-50" = "#6a3d9a",  # purple
"Mindist+Opp" = "#1dd3b0"  # teal/aqua (new)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = FALSE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"MCTS-0" = "#1f78b4",   # blue
"MCTS-25" = "#33a02c",  # green
"MCTS-50" = "#6a3d9a",  # purple
"Mindist+Opp" = "#1dd3b0"  # teal/aqua (new)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = FALSE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
main_colors <- c(
"MCTS-10" = "#1f78b4",   # blue
"MCTS-25" = "#33a02c",  # green
"MCTS-50" = "#6a3d9a",  # purple
"Mindist+Opp" = "#1dd3b0"  # teal/aqua (new)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = FALSE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"MCTS-10" = "#1f78b4",   # blue
"MCTS-25" = "#33a02c",  # green
"MCTS-50" = "#6a3d9a",  # purple
"Mindist+Opp" = "#1dd3b0"  # teal/aqua (new)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = FALSE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,3000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=35)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
d <- read_csv("~/Desktop/internship-25/Rummy/Rummy_EloData 2/RulevsRule_EloData.csv")
det_K = function(x)
{
if(x <= 5)
{
K = 40
}else if(x <= 10)
{
K = 20
}else
{
K = 10
}
return(K)
}
set.seed(1234)
d = d[sample(1:nrow(d)),]
users = unique(c(d$`Strategy 1`,d$`Strategy 2`))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 6000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
change = numeric(length = nrow(d))
change_prev = numeric(length = nrow(d))
for(i in 1:nrow(d))
{
index1 = which(users == d$`Strategy 1`[i])
index2 = which(users == d$`Strategy 2`[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
score_diff = abs(d$`P1 Score`[i]-d$`P2 Score`[i])
score_multiplier = score_diff/30
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = as.numeric(d$Winner_ID[i] == 0)
A2 = as.numeric(d$Winner_ID[i] != 0)
D = ratings[index1] - ratings[index2]
E1 = 1/(1 + 10^(-D/400))
E2 = 1 - E1
change[i] = abs(round((K1+K2)/2 * score_multiplier * (A1 - E1)))
change_prev[i]=abs(round((K1+K2)/2 * (A1 - E1)))
ratings[index1] = ratings[index1] + round(K1 * score_multiplier * (A1 - E1))
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] + round(K2 * score_multiplier * (A2 - E2))
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
set.seed(1234)
d = d[sample(1:nrow(d)),]
users = unique(c(d$`Strategy 1`,d$`Strategy 2`))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 10000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
change = numeric(length = nrow(d))
change_prev = numeric(length = nrow(d))
set.seed(1234)
d = d[sample(1:nrow(d)),]
users = unique(c(d$`Strategy 1`,d$`Strategy 2`))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 10000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
change = numeric(length = nrow(d))
change_prev = numeric(length = nrow(d))
for(i in 1:nrow(d))
{
index1 = which(users == d$`Strategy 1`[i])
index2 = which(users == d$`Strategy 2`[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
score_diff = abs(d$`P1 Score`[i]-d$`P2 Score`[i])
score_multiplier = score_diff/30
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = as.numeric(d$Winner_ID[i] == 0)
A2 = as.numeric(d$Winner_ID[i] != 0)
D = ratings[index1] - ratings[index2]
E1 = 1/(1 + 10^(-D/400))
E2 = 1 - E1
change[i] = abs(round((K1+K2)/2 * score_multiplier * (A1 - E1)))
change_prev[i]=abs(round((K1+K2)/2 * (A1 - E1)))
ratings[index1] = ratings[index1] + round(K1 * score_multiplier * (A1 - E1))
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] + round(K2 * score_multiplier * (A2 - E2))
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating,"Avg Change in Ratings" = change,"Avg Change in Ratings without score modifications" = change_prev)
colnames(dynamic_ratings) = users
cbind(users,ratings)
users
# Load libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"Mindist"             = "#1f78b4",  # deep blue
"Random"              = "#33a02c",  # forest green
"Minscore"            = "#6a3d9a",  # purple
"Mindist+Opp"         = "#1dd3b0",  # teal
"Mindist+minscore"    = "#a6cee3",  # light blue
"DefeatHeuristic"     = "#66c2a5"   # seafoam green (replaces borderline color)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 1.5, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 0.9, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
main_colors <- c(
"Mindist"             = "#1f77b4",  # bright blue
"Random"              = "#17becf",  # strong cyan
"Minscore"            = "#9467bd",  # vivid violet
"Mindist+Opp"         = "#2ca02c",  # bright green
"Mindist+minscore"    = "#8c564b",  # deep brownish-plum
"DefeatHeuristic"     = "#e377c2"   # magenta pink (still on cool edge)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
main_colors <- c(
"Mindist"             = "#1f77b4",  # bright blue
"Random"              = "#17becf",  # strong cyan
"Minscore"            = "#94070d",  # vivid violet
"Mindist+Opp"         = "#2ca02c",  # bright green
"Mindist+minscore"    = "#8c5600",  # deep brownish-plum
"DefeatHeuristic"     = "#e377c2"   # magenta pink (still on cool edge)
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy") +
theme_minimal()
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,3000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=35)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,7000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=35)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,9000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=35)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,20000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=35)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,250000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=55)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,25000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=55)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,25000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=100)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
55
55
# Hist
hist(change, col=rgb(1,0,0,0.5),ylim = c(0,25000),xlim = c(0,20), main="Overlapping Histograms", xlab="Value", breaks=55)
hist(change_prev, col=rgb(0,0,1,0.5), add=TRUE, breaks=35)
legend("topright", legend=c("Modified Rating Change", "Previous Rating Change"), fill=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), cex =0.7)
write.csv(d, "~/Desktop/internship-25/Rummy/Rummy_EloData 2/RulevsRule_Elo.csv")
