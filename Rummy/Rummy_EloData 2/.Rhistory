plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
d = read.csv("~/Desktop/internship-25/Rummy/Rummy_EloData 2/newdata/RulevsRule_EloData2.csv")
d1 = d
det_K = function(x)
{
if(x <= 5)
{
K = 1
}else if(x <= 10)
{
K = 0.5
}else
{
K = 0.25
}
return(K)
}
set.seed(1234)
#d = d1
d = d[sample(1:nrow(d1)),]
users = unique(c(d$Strategy.1,d$Strategy.2))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 20000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
for(i in 1:nrow(d))
{
flag = 0
index1 = which(users == d$Strategy.1[i])
index2 = which(users == d$Strategy.2[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = d$P1.Score[i]
A2 = d$P2.Score[i]
A = A1 + A2
D = ratings[index1] - ratings[index2]
I = d$init.score1[i] - d$init.score2[i]
E1 = A/(1 + 10^(D/338-I/30))
E2 = A - E1
if((A1 - E1) > 0 && d$Winner_ID[i] == 0)
{
flag = 1
}else if((A1-E1)< 0 && d$Winner_ID[i] == 1)
{
flag = 1
}
ratings[index1] = ratings[index1] - round(K1 * (A1 - E1))*(flag == 0)
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] - round(K2 * (A2 - E2))*(flag == 0)
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating)
colnames(dynamic_ratings) = users
cbind(users,ratings)
summary(dynamic_ratings)
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"Mindist"             = "#e41a1c",  # vibrant red
"Random"              = "#377eb8",  # bright blue
"Minscore"            = "#4daf4a",  # bright green
"Mindist + Opp"         = "#984ea3",  # rich purple
"Mindist + minscore"    = "#ff7f00",  # vivid orange
"Defeat Heuristic"     = "#ffe111"   # bright yellow
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors) +ylim(1000,1200)
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy",fontsize = 2) +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
d = read.csv("~/Desktop/internship-25/Rummy/Rummy_EloData 2/newdata/RulevsRule_EloData2.csv")
d1 = d
det_K = function(x)
{
if(x <= 5)
{
K = 1
}else if(x <= 10)
{
K = 0.5
}else
{
K = 0.25
}
return(K)
}
set.seed(1234)
#d = d1
d = d[sample(1:nrow(d1)),]
users = unique(c(d$Strategy.1,d$Strategy.2))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 20000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
for(i in 1:nrow(d))
{
flag = 0
index1 = which(users == d$Strategy.1[i])
index2 = which(users == d$Strategy.2[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = d$P1.Score[i]
A2 = d$P2.Score[i]
A = A1 + A2
D = ratings[index1] - ratings[index2]
I = d$init.score1[i] - d$init.score2[i]
E1 = A/(1 + 10^(D/338-I/30))
E2 = A - E1
if((A1 - E1) > 0 && d$Winner_ID[i] == 0)
{
flag = 1
}else if((A1-E1)< 0 && d$Winner_ID[i] == 1)
{
flag = 1
}
ratings[index1] = ratings[index1] - round(K1 * (A1 - E1))*(flag == 0)
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] - round(K2 * (A2 - E2))*(flag == 0)
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating)
colnames(dynamic_ratings) = users
cbind(users,ratings)
summary(dynamic_ratings)
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"Mindist"             = "#e41a1c",  # vibrant red
"Random"              = "#377eb8",  # bright blue
"Minscore"            = "#4daf4a",  # bright green
"Mindist + Opp"         = "#984ea3",  # rich purple
"Mindist + minscore"    = "#ff7f00",  # vivid orange
"Defeat Heuristic"     = "#ffe111"   # bright yellow
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors)
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy",fontsize = 2) +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
d = read.csv("~/Desktop/internship-25/Rummy/Rummy_EloData 2/newdata/RulevsRule_EloData2.csv")
d1 = d
det_K = function(x)
{
if(x <= 5)
{
K = 1
}else if(x <= 10)
{
K = 0.5
}else
{
K = 0.25
}
return(K)
}
set.seed(1234)
#d = d1
d = d[sample(1:nrow(d1)),]
users = unique(c(d$Strategy.1,d$Strategy.2))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 20000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
for(i in 1:nrow(d))
{
flag = 0
index1 = which(users == d$Strategy.1[i])
index2 = which(users == d$Strategy.2[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = d$P1.Score[i]
A2 = d$P2.Score[i]
A = A1 + A2
D = ratings[index1] - ratings[index2]
I = d$init.score1[i] - d$init.score2[i]
E1 = A/(1 + 10^(D/338-I/30))
E2 = A - E1
if((A1 - E1) > 0 && d$Winner_ID[i] == 0)
{
flag = 1
}else if((A1-E1)< 0 && d$Winner_ID[i] == 1)
{
flag = 1
}
ratings[index1] = ratings[index1] - round(K1 * (A1 - E1))*(flag == 0)
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] - round(K2 * (A2 - E2))*(flag == 0)
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating)
colnames(dynamic_ratings) = users
cbind(users,ratings)
summary(dynamic_ratings)
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"Mindist"             = "#e41a1c",  # vibrant red
"Random"              = "#377eb8",  # bright blue
"Minscore"            = "#4daf4a",  # bright green
"Mindist + Opp"         = "#984ea3",  # rich purple
"Mindist + minscore"    = "#ff7f00",  # vivid orange
"Defeat Heuristic"     = "#ffe111"   # bright yellow
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +ylim(1000,1200)
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors)+
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy",fontsize = 2) +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
d = read.csv("~/Desktop/internship-25/Rummy/Rummy_EloData 2/newdata/RulevsRule_EloData2.csv")
d1 = d
det_K = function(x)
{
if(x <= 5)
{
K = 1
}else if(x <= 10)
{
K = 0.5
}else
{
K = 0.25
}
return(K)
}
set.seed(1234)
#d = d1
d = d[sample(1:nrow(d1)),]
users = unique(c(d$Strategy.1,d$Strategy.2))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 20000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
for(i in 1:nrow(d))
{
flag = 0
index1 = which(users == d$Strategy.1[i])
index2 = which(users == d$Strategy.2[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = d$P1.Score[i]
A2 = d$P2.Score[i]
A = A1 + A2
D = ratings[index1] - ratings[index2]
I = d$init.score1[i] - d$init.score2[i]
E1 = A/(1 + 10^(D/338-I/30))
E2 = A - E1
if((A1 - E1) > 0 && d$Winner_ID[i] == 0)
{
flag = 1
}else if((A1-E1)< 0 && d$Winner_ID[i] == 1)
{
flag = 1
}
ratings[index1] = ratings[index1] - round(K1 * (A1 - E1))*(flag == 0)
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] - round(K2 * (A2 - E2))*(flag == 0)
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating)
colnames(dynamic_ratings) = users
cbind(users,ratings)
summary(dynamic_ratings)
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"Mindist"             = "#e41a1c",  # vibrant red
"Random"              = "#377eb8",  # bright blue
"Minscore"            = "#4daf4a",  # bright green
"Mindist + Opp"         = "#984ea3",  # rich purple
"Mindist + minscore"    = "#ff7f00",  # vivid orange
"Defeat Heuristic"     = "#ffe111"   # bright yellow
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7) +ylim(1000,1400)
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors)+
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy",fontsize = 2) +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
d = read.csv("~/Desktop/internship-25/Rummy/Rummy_EloData 2/newdata/RulevsRule_EloData2.csv")
d1 = d
det_K = function(x)
{
if(x <= 5)
{
K = 1
}else if(x <= 10)
{
K = 0.5
}else
{
K = 0.25
}
return(K)
}
set.seed(1234)
#d = d1
d = d[sample(1:nrow(d1)),]
users = unique(c(d$Strategy.1,d$Strategy.2))
users
ratings = rep(1000,length(users))
dynamic_ratings =  matrix(data = NA, nrow = 20000,ncol = length(users))
games = rep(0,length(users))
P1_rating = numeric(length = nrow(d))
P2_rating = P1_rating
for(i in 1:nrow(d))
{
flag = 0
index1 = which(users == d$Strategy.1[i])
index2 = which(users == d$Strategy.2[i])
games[index1] = games[index1] + 1
games[index2] = games[index2] + 1
K1 = det_K(games[index1])
K2 = det_K(games[index2])
A1 = d$P1.Score[i]
A2 = d$P2.Score[i]
A = A1 + A2
D = ratings[index1] - ratings[index2]
I = d$init.score1[i] - d$init.score2[i]
E1 = A/(1 + 10^(D/338-I/30))
E2 = A - E1
if((A1 - E1) > 0 && d$Winner_ID[i] == 0)
{
flag = 1
}else if((A1-E1)< 0 && d$Winner_ID[i] == 1)
{
flag = 1
}
ratings[index1] = ratings[index1] - round(K1 * (A1 - E1))*(flag == 0)
dynamic_ratings[games[index1],index1] = ratings[index1]
ratings[index2] = ratings[index2] - round(K2 * (A2 - E2))*(flag == 0)
dynamic_ratings[games[index2],index2] = ratings[index2]
P1_rating[i] = ratings[index1]
P2_rating[i] = ratings[index2]
}
d = cbind.data.frame(d,P1_rating,P2_rating)
colnames(dynamic_ratings) = users
cbind(users,ratings)
summary(dynamic_ratings)
library(ggplot2)
library(tidyr)
library(dplyr)
# Convert matrix to data frame with row index as 'Games'
df <- as.data.frame(dynamic_ratings)
df$Games <- 1:nrow(df)
# Convert to long format for ggplot
df_long <- pivot_longer(df, cols = -Games, names_to = "Series", values_to = "Value")
# Compute average values per series
avg_lines <- df_long %>%
group_by(Series) %>%
summarise(Average =mean(Value, na.rm = TRUE))
main_colors <- c(
"Mindist"             = "#e41a1c",  # vibrant red
"Random"              = "#377eb8",  # bright blue
"Minscore"            = "#4daf4a",  # bright green
"Mindist + Opp"         = "#984ea3",  # rich purple
"Mindist + minscore"    = "#ff7f00",  # vivid orange
"Defeat Heuristic"     = "#ffe111"   # bright yellow
)
# Plot
ggplot(df_long, aes(x = Games, y = Value, color = Series)) +
geom_line(size = 0.7)+
# Add horizontal average lines with lighter color
geom_hline(data = avg_lines,
aes(yintercept = Average, color = Series),
size = 2, alpha = 0.5, show.legend = TRUE) +
# Manual color scale for main lines
scale_color_manual(values = main_colors)+ylim(1000,1400)+
labs(title = "Dynamic Plot of Strategy Ratings",
x = "Game Index",
y = "Dynamic Ratings",
color = "Strategy",fontsize = 2) +
theme(
plot.title = element_text(size = 18, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
